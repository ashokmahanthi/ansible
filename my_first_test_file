---
- hosts: sss.cech.uc.edu #all:!localhost
  pre_tasks:
    - name: Check to see if NVM is installed
      ansible.builtin.stat:
        path: ~/.nvm
      register: nvm_directory
      become: true
      become_user: itsc

    - name: Determine node version
      ansible.builtin.command: node -v
      register: nodejs_version
      become: true
      ignore_errors: true
      changed_when: false

    - name: Print Node.js version
      debug:
        var: nodejs_version.stdout_lines

    - name: Extract major version
      set_fact:
        current_nodejs_major_version: "{{ nodejs_version.stdout | regex_replace('^v(\\d+).*$', '\\1') }}"

    - name: Display Node.js major version
      debug:
        var: current_nodejs_major_version

    # - name: Check Node.js version range
    #   debug:
    #     msg: >
    #       {% if current_nodejs_major_version | int < 12 %}
    #         Node.js version is less than 12.
    #       {% elif current_nodejs_major_version | int == 12 %}
    #         Node.js version is 12.
    #       {% elif current_nodejs_major_version | int > 14 %}
    #         Node.js version is greater than 14.
    #       {% endif %}

    - name: Fail if Node.js version is less than 12
      fail:
        msg: "Node.js version is less than 12."
      when: current_nodejs_major_version | int < 12

    - name: Set NodeJS update version
      ansible.builtin.set_fact:
        nodejs_update_version: |
          {% if current_nodejs_major_version | int >= 20 %}
          20
          {% elif current_nodejs_major_version | int >= 18 %}
          18
          {% elif current_nodejs_major_version | int >= 16 %}
          16
          {% elif current_nodejs_major_version | int >= 14 %}
          14
          {% elif current_nodejs_major_version | int >= 12 %}
          12
          {% endif %}

    # - name: Set NodeJS to Update to Latest 12
    #   ansible.builtin.set_fact:
    #     nodejs_update_version: "12"
    #   when: current_nodejs_major_version | int >= 12 and current_nodejs_major_version | int < 14

    # - name: Set NodeJS to Update to Latest 14
    #   ansible.builtin.set_fact:
    #     nodejs_update_version: "14"
    #   when: current_nodejs_major_version | int >= 14 and current_nodejs_major_version | int < 16

    # - name: Set NodeJS to Update to Latest 16
    #   ansible.builtin.set_fact:
    #     nodejs_update_version: "16"
    #   when: current_nodejs_major_version | int >= 16 and current_nodejs_major_version | int < 18

    # - name: Set NodeJS to Update to Latest 18
    #   ansible.builtin.set_fact:
    #     nodejs_update_version: "18"
    #   when: current_nodejs_major_version | int >= 18 and current_nodejs_major_version | int < 20

    # - name: Set NodeJS to Update to Latest 20
    #   ansible.builtin.set_fact:
    #     nodejs_update_version: "20"
    #   when: current_nodejs_major_version | int >= 20

    - name: Display Updated_Node.js major version
      debug:
        var: nodejs_update_version

    # - name: Determine pm2 version
    #   ansible.builtin.command: which pm2
    #   register: pm2_exists
    #   ignore_errors: true
    #   changed_when: false

    # - name: Display pm2 version
    #   debug:
    #     var: pm2_exists.stdout_lines

    # - name: Warn PM2 is not installed
    #   ansible.builtin.debug:
    #     msg: "WARNING: PM2 not installed"
    #   when: not pm2_exists.stdout

  roles:
    - role: software/nodejs
      vars:
        node_version: "{{ nodejs_update_version }}"

    - role: pm2
      vars:
        skip_nodejs: true
      when: pm2_exists.stdout
